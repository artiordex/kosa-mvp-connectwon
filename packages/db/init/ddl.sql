-- 타임존은 애플리케이션 레벨에서 관리하되, DB는 timestamptz 사용
SET TIME ZONE 'UTC';

-- ============ TABLES ============

-- USERS
CREATE TABLE users (
  id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email           CITEXT UNIQUE,                          -- 구글 이메일(고유)
  name            TEXT,
  google_sub      TEXT UNIQUE,                            -- Google OIDC sub
  last_login_at   TIMESTAMPTZ,
  role_flags      INT DEFAULT 0,                          -- 비트 플래그
  preferences     JSONB DEFAULT '{}'::jsonb,
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- PROGRAMS
CREATE TABLE programs (
  id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_by_user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
  type               TEXT,                                -- 세미나/스터디 등
  title              TEXT NOT NULL,
  description        TEXT,
  ai_summary_tags    JSONB DEFAULT '[]'::jsonb,
  is_active          BOOLEAN NOT NULL DEFAULT true,
  created_at         TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at         TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- SESSIONS
CREATE TABLE sessions (
  id                   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  program_id           BIGINT NOT NULL REFERENCES programs(id) ON DELETE CASCADE,
  starts_at            TIMESTAMPTZ NOT NULL,
  ends_at              TIMESTAMPTZ NOT NULL,
  capacity             INT,
  participant_fee      INT,
  status               TEXT NOT NULL DEFAULT 'SCHEDULED',
  room_reservation_id  BIGINT UNIQUE,
  location_text        TEXT,
  created_at           TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at           TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT sessions_time_order CHECK (ends_at > starts_at),
  CONSTRAINT sessions_status_ck CHECK (status IN ('SCHEDULED','CONFIRMED','CANCELLED','COMPLETED'))
);

-- VENUES
CREATE TABLE venues (
  id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name            TEXT NOT NULL,
  address         TEXT,
  opening_hours   JSONB,
  blackout_rules  JSONB,                                  
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- ROOMS
CREATE TABLE rooms (
  id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  venue_id        BIGINT NOT NULL REFERENCES venues(id) ON DELETE CASCADE,
  name            TEXT NOT NULL,
  capacity        INT,
  status          TEXT NOT NULL DEFAULT 'ACTIVE',
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT rooms_uniq_per_venue UNIQUE (venue_id, name),
  CONSTRAINT rooms_status_ck CHECK (status IN ('ACTIVE','INACTIVE','MAINTENANCE'))
);

-- ROOM_RESERVATIONS
CREATE TABLE room_reservations (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  room_id      BIGINT NOT NULL REFERENCES rooms(id) ON DELETE CASCADE,
  user_id      BIGINT NOT NULL REFERENCES users(id) ON DELETE SET NULL,
  starts_at    TIMESTAMPTZ NOT NULL,
  ends_at      TIMESTAMPTZ NOT NULL,
  period       TSTZRANGE GENERATED ALWAYS AS (tstzrange(starts_at, ends_at, '[)')) STORED,
  purpose      TEXT,
  status       TEXT NOT NULL DEFAULT 'PENDING',
  meta         JSONB DEFAULT '{}'::jsonb,
  session_id   BIGINT UNIQUE,  -- 세션 연계 시 세션당 1예약만
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT rr_time_order CHECK (ends_at > starts_at),
  CONSTRAINT rr_status_ck CHECK (status IN ('PENDING','CONFIRMED','CANCELLED','COMPLETED'))
);

-- SESSIONS <-> ROOM_RESERVATIONS 상호 FK (선택, 순서 유연하게 DEFERRABLE)
ALTER TABLE sessions
  ADD CONSTRAINT sessions_room_reservation_fk
  FOREIGN KEY (room_reservation_id) REFERENCES room_reservations(id)
  ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE room_reservations
  ADD CONSTRAINT rr_session_fk
  FOREIGN KEY (session_id) REFERENCES sessions(id)
  ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;

-- 겹침 방지: 같은 room_id에서 PENDING/CONFIRMED 상태끼리 period가 겹치면 금지
ALTER TABLE room_reservations
  ADD CONSTRAINT room_reservations_no_overlap
  EXCLUDE USING gist (
    room_id WITH =,
    period  WITH &&
  )
  WHERE (status IN ('PENDING','CONFIRMED'));

-- PROGRAM_PARTICIPANTS (세션 참여)
CREATE TABLE program_participants (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  session_id   BIGINT NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
  user_id      BIGINT NOT NULL REFERENCES users(id)    ON DELETE CASCADE,
  role         TEXT NOT NULL DEFAULT 'ATTENDEE',
  status       TEXT NOT NULL DEFAULT 'APPLIED',
  joined_at    TIMESTAMPTZ DEFAULT now(),
  CONSTRAINT program_participants_uniq UNIQUE (session_id, user_id),
  CONSTRAINT pp_role_ck   CHECK (role IN ('HOST','ATTENDEE')),
  CONSTRAINT pp_status_ck CHECK (status IN ('APPLIED','CONFIRMED','CANCELLED','NO_SHOW'))
);

-- AI_INTERACTIONS (비용/토큰 로깅)
CREATE TABLE ai_interactions (
  id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id            BIGINT NOT NULL REFERENCES users(id) ON DELETE SET NULL,
  program_id         BIGINT REFERENCES programs(id) ON DELETE SET NULL,
  session_id         BIGINT REFERENCES sessions(id) ON DELETE SET NULL,
  provider           TEXT NOT NULL,                           -- openai/anthropic 등
  model              TEXT NOT NULL,                           -- gpt-4.x/claude 등
  kind               TEXT NOT NULL,                           -- chat/embed/moderation 등
  prompt_tokens      INT  DEFAULT 0,
  completion_tokens  INT  DEFAULT 0,
  cost               NUMERIC(12,6) DEFAULT 0,                 -- 통화는 애플리케이션에서
  status             TEXT NOT NULL DEFAULT 'OK',
  trace_id           TEXT,
  meta               JSONB DEFAULT '{}'::jsonb,
  created_at         TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT ai_status_ck CHECK (status IN ('OK','ERROR'))
);

-- ============ INDEXES (자주 조회될 FK/시간 컬럼) ============
CREATE INDEX ON programs(created_by_user_id);
CREATE INDEX ON sessions(program_id);
CREATE INDEX ON sessions(starts_at);
CREATE INDEX ON room_reservations(room_id);
CREATE INDEX ON room_reservations(starts_at);
CREATE INDEX ON room_reservations(status);
CREATE INDEX ON program_participants(user_id);
CREATE INDEX ON ai_interactions(user_id);
CREATE INDEX ON ai_interactions(created_at);

-- ============ UPDATED_AT 트리거(선택) ============
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END$$;

CREATE TRIGGER trg_users_u BEFORE UPDATE ON users
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_programs_u BEFORE UPDATE ON programs
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_sessions_u BEFORE UPDATE ON sessions
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_venues_u BEFORE UPDATE ON venues
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_rooms_u BEFORE UPDATE ON rooms
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_rr_u BEFORE UPDATE ON room_reservations
FOR EACH ROW EXECUTE FUNCTION set_updated_at();
