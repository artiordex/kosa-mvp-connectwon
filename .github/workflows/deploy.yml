name: Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/web/**'
      - 'apps/admin/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'pnpm-workspace.yaml'
      - 'tsconfig.base.json'
      - '.github/workflows/deploy.yml'

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '10.7.0'

jobs:
  deploy-web:
    runs-on: ubuntu-latest
    name: Deploy Web (Vercel)
    if: contains(join(github.event.head_commit.modified, ' '), 'apps/web/') || contains(join(github.event.head_commit.added, ' '), 'apps/web/') || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable corepack & set pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Install deps (frozen)
        run: pnpm install --frozen-lockfile

      - name: Deploy to Vercel (apps/web)
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
        run: |
          pnpm dlx vercel pull --yes --environment=production --token="$VERCEL_TOKEN"
          pnpm dlx vercel deploy --prod --prebuilt --token="$VERCEL_TOKEN" || pnpm dlx vercel deploy --prod --token="$VERCEL_TOKEN"

  deploy-admin:
    runs-on: ubuntu-latest
    name: Deploy Admin (Vercel)
    if: contains(join(github.event.head_commit.modified, ' '), 'apps/admin/') || contains(join(github.event.head_commit.added, ' '), 'apps/admin/') || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable corepack & set pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Install deps (frozen)
        run: pnpm install --frozen-lockfile

      - name: Deploy to Vercel (apps/admin)
        working-directory: apps/admin
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_ADMIN }}
        run: |
          pnpm dlx vercel pull --yes --environment=production --token="$VERCEL_TOKEN"
          pnpm dlx vercel deploy --prod --prebuilt --token="$VERCEL_TOKEN" || pnpm dlx vercel deploy --prod --token="$VERCEL_TOKEN"
