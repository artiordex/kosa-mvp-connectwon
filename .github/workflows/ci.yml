name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '10.7.0'

jobs:
  # 1) 설치 + Lint + 타입체크 + 빌드
  build_and_checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable corepack & set pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate
          pnpm --version

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: pnpm-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Install deps (frozen)
        run: pnpm install --frozen-lockfile

      # Lint/Typecheck 스크립트는 각 패키지에 존재한다고 가정 (Nx면 nx run-many로 바꿔도 OK)
      - name: Lint
        run: pnpm -r run lint || true  # 아직 일부 패키지에 lint 스크립트 없으면 통과시킴

      - name: Typecheck
        run: pnpm -r run typecheck || true

      - name: Build all
        # Nx 사용 시: pnpm nx run-many -t build --all --parallel
        run: pnpm -r run build

  # 2) Playwright E2E (docker compose 테스트 스택 사용)
  e2e:
    needs: build_and_checks
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable corepack & set pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ env.PNPM_VERSION }} --activate

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: pnpm-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-${{ env.NODE_VERSION }}-

      - name: Install deps (frozen)
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      # 테스트 환경 스택을 infra/docker/compose.test.yml 로 올린다는 가정
      - name: Start test stack (Docker Compose)
        run: |
          docker compose -f infra/docker/compose.test.yml up -d --build
          echo "Waiting for services..."
          # API
          for i in {1..60}; do
            if curl -fsS http://localhost:3001/health >/dev/null 2>&1; then echo "API up"; break; fi
            sleep 2
          done
          # WEB
          for i in {1..60}; do
            if curl -fsS http://localhost:3000 >/dev/null 2>&1; then echo "WEB up"; break; fi
            sleep 2
          done

      - name: Run Playwright (apps/e2e)
        run: pnpm exec playwright test -c apps/e2e --reporter=github

      - name: Upload Playwright report (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/e2e/playwright-report
          if-no-files-found: ignore
          retention-days: 7

      - name: Teardown
        if: always()
        run: docker compose -f infra/docker/compose.test.yml down -v
