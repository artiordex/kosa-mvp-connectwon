/**
 * Description : ddl_with_comments.sql - üìå PostgreSQL Table DDL with Comments
 * Author      : Shiwoo Min
 * Date        : 2025-09-05
 */

-- ÌÉÄÏûÑÏ°¥ ÏÑ§Ï†ï
SET TIME ZONE 'UTC';

-- ================= USERS =================
CREATE TABLE users (
  id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ÏÇ¨Ïö©Ïûê Í≥†Ïú† ID
  email           CITEXT UNIQUE,              -- Íµ¨Í∏Ä Ïù¥Î©îÏùº (Í≥†Ïú†)
  name            TEXT,                       -- Ïù¥Î¶Ñ
  google_sub      TEXT UNIQUE,                -- Google OIDC sub
  last_login_at   TIMESTAMPTZ,                -- ÏµúÍ∑º Î°úÍ∑∏Ïù∏ ÏãúÍ∞Ñ
  role_flags      INT DEFAULT 0,              -- Í∂åÌïú ÌîåÎûòÍ∑∏ (ÎπÑÌä∏ Ïó∞ÏÇ∞Ïö©)
  preferences     JSONB DEFAULT '{}'::jsonb,  -- ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Ï†ïÎ≥¥
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now(), -- ÏÉùÏÑ± ÏãúÍ∞Å
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT now()  -- ÏàòÏ†ï ÏãúÍ∞Å
);

-- ================= PROGRAMS =================
CREATE TABLE programs (
  id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ÌîÑÎ°úÍ∑∏Îû® ID
  created_by_user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE RESTRICT, -- ÏÉùÏÑ±Ïûê (User FK)
  type               TEXT,                        -- ÌîÑÎ°úÍ∑∏Îû® Ïú†Ìòï (ÏÑ∏ÎØ∏ÎÇò Îì±)
  title              TEXT NOT NULL,               -- Ï†úÎ™©
  description        TEXT,                        -- ÏÑ§Î™Ö
  ai_summary_tags    JSONB DEFAULT '[]'::jsonb,   -- AI ÏöîÏïΩ ÌÉúÍ∑∏
  is_active          BOOLEAN NOT NULL DEFAULT true, -- ÌôúÏÑ± Ïó¨Î∂Ä
  created_at         TIMESTAMPTZ NOT NULL DEFAULT now(), -- ÏÉùÏÑ± ÏãúÍ∞Å
  updated_at         TIMESTAMPTZ NOT NULL DEFAULT now()  -- ÏàòÏ†ï ÏãúÍ∞Å
);

-- ================= SESSIONS =================
CREATE TABLE sessions (
  id                   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ÏÑ∏ÏÖò ID
  program_id           BIGINT NOT NULL REFERENCES programs(id) ON DELETE CASCADE, -- ÌîÑÎ°úÍ∑∏Îû® ID
  starts_at            TIMESTAMPTZ NOT NULL,         -- ÏãúÏûë ÏãúÍ∞Ñ
  ends_at              TIMESTAMPTZ NOT NULL,         -- Ï¢ÖÎ£å ÏãúÍ∞Ñ
  capacity             INT,                          -- ÏàòÏö© Ïù∏Ïõê
  participant_fee      INT,                          -- Ï∞∏Í∞ÄÎπÑ
  status               TEXT NOT NULL DEFAULT 'SCHEDULED', -- ÏÉÅÌÉú
  room_reservation_id  BIGINT UNIQUE,                -- ÏòàÏïΩ ID (ÏòµÏÖò)
  location_text        TEXT,                         -- Ïû•ÏÜå ÏÑ§Î™Ö
  created_at           TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at           TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT sessions_time_order CHECK (ends_at > starts_at),
  CONSTRAINT sessions_status_ck CHECK (status IN ('SCHEDULED','CONFIRMED','CANCELLED','COMPLETED'))
);

-- ================= VENUES =================
CREATE TABLE venues (
  id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ÏßÄÏ†ê ID
  name            TEXT NOT NULL,               -- ÏßÄÏ†êÎ™Ö
  address         TEXT,                        -- Ï£ºÏÜå
  opening_hours   JSONB,                       -- Ïö¥ÏòÅÏãúÍ∞Ñ
  blackout_rules  JSONB,                       -- ÏòàÏïΩ Ï†úÌïú Í∑úÏπô
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- ================= ROOMS =================
CREATE TABLE rooms (
  id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Î∞© ID
  venue_id        BIGINT NOT NULL REFERENCES venues(id) ON DELETE CASCADE, -- ÏßÄÏ†ê ID
  name            TEXT NOT NULL,               -- Î∞© Ïù¥Î¶Ñ
  capacity        INT,                         -- Ï†ïÏõê
  status          TEXT NOT NULL DEFAULT 'ACTIVE', -- Î∞© ÏÉÅÌÉú
  created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT rooms_uniq_per_venue UNIQUE (venue_id, name),
  CONSTRAINT rooms_status_ck CHECK (status IN ('ACTIVE','INACTIVE','MAINTENANCE'))
);

-- ================= ROOM_RESERVATIONS =================
CREATE TABLE room_reservations (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ÏòàÏïΩ ID
  room_id      BIGINT NOT NULL REFERENCES rooms(id) ON DELETE CASCADE, -- Î∞© ID
  user_id      BIGINT NOT NULL REFERENCES users(id) ON DELETE SET NULL, -- ÏÇ¨Ïö©Ïûê ID
  starts_at    TIMESTAMPTZ NOT NULL,           -- ÏãúÏûë ÏãúÍ∞Ñ
  ends_at      TIMESTAMPTZ NOT NULL,           -- Ï¢ÖÎ£å ÏãúÍ∞Ñ
  period       TSTZRANGE GENERATED ALWAYS AS (tstzrange(starts_at, ends_at, '[)')) STORED, -- ÏãúÍ∞Ñ Î≤îÏúÑ
  purpose      TEXT,                            -- Ïö©ÎèÑ
  status       TEXT NOT NULL DEFAULT 'PENDING', -- ÏòàÏïΩ ÏÉÅÌÉú
  meta         JSONB DEFAULT '{}'::jsonb,       -- Î©îÌÉÄ Ï†ïÎ≥¥
  session_id   BIGINT UNIQUE,                   -- Ïó∞Í≥Ñ ÏÑ∏ÏÖò ID
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT rr_time_order CHECK (ends_at > starts_at),
  CONSTRAINT rr_status_ck CHECK (status IN ('PENDING','CONFIRMED','CANCELLED','COMPLETED'))
);

-- ÏòàÏïΩÍ≥º ÏÑ∏ÏÖòÏùÄ ÏÉÅÌò∏ Ï∞∏Ï°∞ Í∞ÄÎä•
ALTER TABLE sessions
  ADD CONSTRAINT sessions_room_reservation_fk
  FOREIGN KEY (room_reservation_id) REFERENCES room_reservations(id)
  ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE room_reservations
  ADD CONSTRAINT rr_session_fk
  FOREIGN KEY (session_id) REFERENCES sessions(id)
  ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;

-- Í≤πÏπòÎäî ÏòàÏïΩ Î∞©ÏßÄ: Í∞ôÏùÄ Î∞©ÏóêÏÑú PENDING/CONFIRMED ÏÉÅÌÉúÎÅºÎ¶¨ ÏãúÍ∞Ñ Í≤πÏπ® Í∏àÏßÄ
ALTER TABLE room_reservations
  ADD CONSTRAINT room_reservations_no_overlap
  EXCLUDE USING gist (
    room_id WITH =,
    period  WITH &&
  )
  WHERE (status IN ('PENDING','CONFIRMED'));

-- ================= PROGRAM_PARTICIPANTS =================
CREATE TABLE program_participants (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Ï∞∏Ïó¨ ID
  session_id   BIGINT NOT NULL REFERENCES sessions(id) ON DELETE CASCADE, -- ÏÑ∏ÏÖò ID
  user_id      BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,   -- ÏÇ¨Ïö©Ïûê ID
  role         TEXT NOT NULL DEFAULT 'ATTENDEE', -- Ïó≠Ìï†
  status       TEXT NOT NULL DEFAULT 'APPLIED',  -- ÏÉÅÌÉú
  joined_at    TIMESTAMPTZ DEFAULT now(),        -- Ï∞∏Ïó¨ ÏãúÍ∞Å
  CONSTRAINT program_participants_uniq UNIQUE (session_id, user_id),
  CONSTRAINT pp_role_ck   CHECK (role IN ('HOST','ATTENDEE')),
  CONSTRAINT pp_status_ck CHECK (status IN ('APPLIED','CONFIRMED','CANCELLED','NO_SHOW'))
);

-- ================= AI_INTERACTIONS =================
CREATE TABLE ai_interactions (
  id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- AI ÏöîÏ≤≠ ID
  user_id            BIGINT NOT NULL REFERENCES users(id) ON DELETE SET NULL, -- ÏÇ¨Ïö©Ïûê
  program_id         BIGINT REFERENCES programs(id) ON DELETE SET NULL, -- ÌîÑÎ°úÍ∑∏Îû® (ÏòµÏÖò)
  session_id         BIGINT REFERENCES sessions(id) ON DELETE SET NULL, -- ÏÑ∏ÏÖò (ÏòµÏÖò)
  provider           TEXT NOT NULL,               -- OpenAI Îì±
  model              TEXT NOT NULL,               -- GPT-4 Îì±
  kind               TEXT NOT NULL,               -- chat/embed Îì±
  prompt_tokens      INT  DEFAULT 0,              -- ÏöîÏ≤≠ ÌÜ†ÌÅ∞
  completion_tokens  INT  DEFAULT 0,              -- ÏùëÎãµ ÌÜ†ÌÅ∞
  cost               NUMERIC(12,6) DEFAULT 0,     -- ÎπÑÏö©
  status             TEXT NOT NULL DEFAULT 'OK',  -- ÏÉÅÌÉú
  trace_id           TEXT,                        -- Ï∂îÏ†Å ID
  meta               JSONB DEFAULT '{}'::jsonb,   -- Î∂ÄÍ∞ÄÏ†ïÎ≥¥
  created_at         TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT ai_status_ck CHECK (status IN ('OK','ERROR'))
);

-- ================= INDEXES =================
CREATE INDEX ON programs(created_by_user_id);
CREATE INDEX ON sessions(program_id);
CREATE INDEX ON sessions(starts_at);
CREATE INDEX ON room_reservations(room_id);
CREATE INDEX ON room_reservations(starts_at);
CREATE INDEX ON room_reservations(status);
CREATE INDEX ON program_participants(user_id);
CREATE INDEX ON ai_interactions(user_id);
CREATE INDEX ON ai_interactions(created_at);

-- ================= TRIGGERS (UPDATED_AT) =================
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END$$;

-- Ìä∏Î¶¨Í±∞ Ïó∞Í≤∞
CREATE TRIGGER trg_users_u BEFORE UPDATE ON users
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_programs_u BEFORE UPDATE ON programs
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_sessions_u BEFORE UPDATE ON sessions
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_venues_u BEFORE UPDATE ON venues
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_rooms_u BEFORE UPDATE ON rooms
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_rr_u BEFORE UPDATE ON room_reservations
FOR EACH ROW EXECUTE FUNCTION set_updated_at();
